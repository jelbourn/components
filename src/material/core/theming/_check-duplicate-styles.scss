@import './theming';

// Whether duplication warnings should be disabled. Warnings enabled by default.
$mat-theme-ignore-duplication-warnings: false !default;

// Warning that will be printed if duplicated styles are generated by a theme.
$_mat-theme-duplicate-warning: 'Read more about how style duplication can be avoided in a ' +
  'dedicated guide. https://github.com/angular/components/blob/master/guides/duplicate-theming-styles.md';

// These variable are not intended to be overridden externally. They use `!default` to
// avoid being reset every time this file is imported.
$_mat-theme-emitted-color: () !default;
$_mat-theme-emitted-typography: () !default;
$_mat-theme-emitted-density: () !default;

// Checks if configurations that have been declared in the given theme have been generated
// before. If so, warnings will be reported. This should notify developers in case duplicate
// styles are accidentally generated due to wrong usage of the all-theme mixins.
//
// The mixin keeps track of all configurations in a list that is scoped to the specified
// id. This is necessary because a given theme can be passed to multiple disjoint theme mixins
// (e.g. `angular-material-theme` and `angular-material-mdc-theme`) without causing any
// style duplication.
@mixin _mat-check-duplicate-theme-styles($theme, $id) {
  // Skip the duplicated style check if it has been explicitly disabled.
  @if not $mat-theme-ignore-duplication-warnings {
    $color-config: mat-get-color-config($theme);
    $density-config: mat-get-density-config($theme);
    $typography-config: mat-get-typography-config($theme);
    // Lists of previous `color`, `density` and `typography` configurations.
    $previous-color: map_get($_mat-theme-emitted-color, $id) or ();
    $previous-typography: map_get($_mat-theme-emitted-typography, $id) or ();
    $previous-density: map_get($_mat-theme-emitted-density, $id) or ();

    // Check if the color configuration has been generated before.
    @if $color-config != null {
      @if index($previous-color, $color-config) != null {
        @warn 'The same color styles are generated multiple times. ' +
            $_mat-theme-duplicate-warning;
      }
      $previous-color: append($previous-color, $color-config);
    }

    // Check if the typography configuration has been generated before.
    @if $typography-config != null {
      @if index($previous-typography, $typography-config) != null {
        @warn 'The same typography styles are generated multiple times. ' +
            $_mat-theme-duplicate-warning;
      }
      $previous-typography: append($previous-typography, $typography-config);
    }

    // Check if the density configuration has been generated before.
    @if $density-config != null {
      @if index($previous-density, $density-config) != null {
        @warn 'The same density styles are generated multiple times. ' +
            $_mat-theme-duplicate-warning;
      }
      $previous-density: append($previous-density, $density-config);
    }

    $_mat-theme-emitted-color: map_merge(
        $_mat-theme-emitted-color, ($id: $previous-color)) !global;
    $_mat-theme-emitted-density: map_merge(
        $_mat-theme-emitted-density, ($id: $previous-density)) !global;
    $_mat-theme-emitted-typography: map_merge(
        $_mat-theme-emitted-typography, ($id: $previous-typography)) !global;
  }
}
